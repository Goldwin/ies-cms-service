// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/Goldwin/ies-pik-cms/pkg/auth/entities"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// PasswordRepository is an autogenerated mock type for the PasswordRepository type
type PasswordRepository struct {
	mock.Mock
}

type PasswordRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordRepository) EXPECT() *PasswordRepository_Expecter {
	return &PasswordRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0
func (_m *PasswordRepository) Delete(_a0 *entities.PasswordDetail) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entities.PasswordDetail) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PasswordRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 *entities.PasswordDetail
func (_e *PasswordRepository_Expecter) Delete(_a0 interface{}) *PasswordRepository_Delete_Call {
	return &PasswordRepository_Delete_Call{Call: _e.mock.On("Delete", _a0)}
}

func (_c *PasswordRepository_Delete_Call) Run(run func(_a0 *entities.PasswordDetail)) *PasswordRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.PasswordDetail))
	})
	return _c
}

func (_c *PasswordRepository_Delete_Call) Return(_a0 error) *PasswordRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordRepository_Delete_Call) RunAndReturn(run func(*entities.PasswordDetail) error) *PasswordRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResetToken provides a mock function with given fields: e
func (_m *PasswordRepository) DeleteResetToken(e entities.EmailAddress) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResetToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordRepository_DeleteResetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResetToken'
type PasswordRepository_DeleteResetToken_Call struct {
	*mock.Call
}

// DeleteResetToken is a helper method to define mock.On call
//   - e entities.EmailAddress
func (_e *PasswordRepository_Expecter) DeleteResetToken(e interface{}) *PasswordRepository_DeleteResetToken_Call {
	return &PasswordRepository_DeleteResetToken_Call{Call: _e.mock.On("DeleteResetToken", e)}
}

func (_c *PasswordRepository_DeleteResetToken_Call) Run(run func(e entities.EmailAddress)) *PasswordRepository_DeleteResetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.EmailAddress))
	})
	return _c
}

func (_c *PasswordRepository_DeleteResetToken_Call) Return(_a0 error) *PasswordRepository_DeleteResetToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordRepository_DeleteResetToken_Call) RunAndReturn(run func(entities.EmailAddress) error) *PasswordRepository_DeleteResetToken_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0
func (_m *PasswordRepository) Get(_a0 string) (*entities.PasswordDetail, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entities.PasswordDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities.PasswordDetail, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entities.PasswordDetail); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PasswordDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PasswordRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 string
func (_e *PasswordRepository_Expecter) Get(_a0 interface{}) *PasswordRepository_Get_Call {
	return &PasswordRepository_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *PasswordRepository_Get_Call) Run(run func(_a0 string)) *PasswordRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PasswordRepository_Get_Call) Return(_a0 *entities.PasswordDetail, _a1 error) *PasswordRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordRepository_Get_Call) RunAndReturn(run func(string) (*entities.PasswordDetail, error)) *PasswordRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetResetCode provides a mock function with given fields: e
func (_m *PasswordRepository) GetResetCode(e entities.EmailAddress) (string, error) {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for GetResetCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) (string, error)); ok {
		return rf(e)
	}
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) string); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(entities.EmailAddress) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordRepository_GetResetCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResetCode'
type PasswordRepository_GetResetCode_Call struct {
	*mock.Call
}

// GetResetCode is a helper method to define mock.On call
//   - e entities.EmailAddress
func (_e *PasswordRepository_Expecter) GetResetCode(e interface{}) *PasswordRepository_GetResetCode_Call {
	return &PasswordRepository_GetResetCode_Call{Call: _e.mock.On("GetResetCode", e)}
}

func (_c *PasswordRepository_GetResetCode_Call) Run(run func(e entities.EmailAddress)) *PasswordRepository_GetResetCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.EmailAddress))
	})
	return _c
}

func (_c *PasswordRepository_GetResetCode_Call) Return(_a0 string, _a1 error) *PasswordRepository_GetResetCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordRepository_GetResetCode_Call) RunAndReturn(run func(entities.EmailAddress) (string, error)) *PasswordRepository_GetResetCode_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0
func (_m *PasswordRepository) List(_a0 []string) ([]*entities.PasswordDetail, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*entities.PasswordDetail
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]*entities.PasswordDetail, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]string) []*entities.PasswordDetail); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.PasswordDetail)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PasswordRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 []string
func (_e *PasswordRepository_Expecter) List(_a0 interface{}) *PasswordRepository_List_Call {
	return &PasswordRepository_List_Call{Call: _e.mock.On("List", _a0)}
}

func (_c *PasswordRepository_List_Call) Run(run func(_a0 []string)) *PasswordRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]string))
	})
	return _c
}

func (_c *PasswordRepository_List_Call) Return(_a0 []*entities.PasswordDetail, _a1 error) *PasswordRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordRepository_List_Call) RunAndReturn(run func([]string) ([]*entities.PasswordDetail, error)) *PasswordRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *PasswordRepository) Save(_a0 *entities.PasswordDetail) (*entities.PasswordDetail, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 *entities.PasswordDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities.PasswordDetail) (*entities.PasswordDetail, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entities.PasswordDetail) *entities.PasswordDetail); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PasswordDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities.PasswordDetail) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type PasswordRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 *entities.PasswordDetail
func (_e *PasswordRepository_Expecter) Save(_a0 interface{}) *PasswordRepository_Save_Call {
	return &PasswordRepository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *PasswordRepository_Save_Call) Run(run func(_a0 *entities.PasswordDetail)) *PasswordRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.PasswordDetail))
	})
	return _c
}

func (_c *PasswordRepository_Save_Call) Return(_a0 *entities.PasswordDetail, _a1 error) *PasswordRepository_Save_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordRepository_Save_Call) RunAndReturn(run func(*entities.PasswordDetail) (*entities.PasswordDetail, error)) *PasswordRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SaveResetCode provides a mock function with given fields: e, token, ttl
func (_m *PasswordRepository) SaveResetCode(e entities.EmailAddress, token string, ttl time.Duration) error {
	ret := _m.Called(e, token, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SaveResetCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.EmailAddress, string, time.Duration) error); ok {
		r0 = rf(e, token, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordRepository_SaveResetCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveResetCode'
type PasswordRepository_SaveResetCode_Call struct {
	*mock.Call
}

// SaveResetCode is a helper method to define mock.On call
//   - e entities.EmailAddress
//   - token string
//   - ttl time.Duration
func (_e *PasswordRepository_Expecter) SaveResetCode(e interface{}, token interface{}, ttl interface{}) *PasswordRepository_SaveResetCode_Call {
	return &PasswordRepository_SaveResetCode_Call{Call: _e.mock.On("SaveResetCode", e, token, ttl)}
}

func (_c *PasswordRepository_SaveResetCode_Call) Run(run func(e entities.EmailAddress, token string, ttl time.Duration)) *PasswordRepository_SaveResetCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.EmailAddress), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *PasswordRepository_SaveResetCode_Call) Return(_a0 error) *PasswordRepository_SaveResetCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordRepository_SaveResetCode_Call) RunAndReturn(run func(entities.EmailAddress, string, time.Duration) error) *PasswordRepository_SaveResetCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordRepository creates a new instance of PasswordRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordRepository {
	mock := &PasswordRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
