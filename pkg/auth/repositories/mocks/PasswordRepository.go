// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/Goldwin/ies-pik-cms/pkg/auth/entities"
	mock "github.com/stretchr/testify/mock"
)

// PasswordRepository is an autogenerated mock type for the PasswordRepository type
type PasswordRepository struct {
	mock.Mock
}

type PasswordRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordRepository) EXPECT() *PasswordRepository_Expecter {
	return &PasswordRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: _a0
func (_m *PasswordRepository) Get(_a0 entities.EmailAddress) (*entities.PasswordDetail, error) {
	ret := _m.Called(_a0)

	var r0 *entities.PasswordDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) (*entities.PasswordDetail, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) *entities.PasswordDetail); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.PasswordDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.EmailAddress) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PasswordRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 entities.EmailAddress
func (_e *PasswordRepository_Expecter) Get(_a0 interface{}) *PasswordRepository_Get_Call {
	return &PasswordRepository_Get_Call{Call: _e.mock.On("Get", _a0)}
}

func (_c *PasswordRepository_Get_Call) Run(run func(_a0 entities.EmailAddress)) *PasswordRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.EmailAddress))
	})
	return _c
}

func (_c *PasswordRepository_Get_Call) Return(_a0 *entities.PasswordDetail, _a1 error) *PasswordRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordRepository_Get_Call) RunAndReturn(run func(entities.EmailAddress) (*entities.PasswordDetail, error)) *PasswordRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: _a0
func (_m *PasswordRepository) Save(_a0 entities.PasswordDetail) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.PasswordDetail) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type PasswordRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - _a0 entities.PasswordDetail
func (_e *PasswordRepository_Expecter) Save(_a0 interface{}) *PasswordRepository_Save_Call {
	return &PasswordRepository_Save_Call{Call: _e.mock.On("Save", _a0)}
}

func (_c *PasswordRepository_Save_Call) Run(run func(_a0 entities.PasswordDetail)) *PasswordRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.PasswordDetail))
	})
	return _c
}

func (_c *PasswordRepository_Save_Call) Return(_a0 error) *PasswordRepository_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordRepository_Save_Call) RunAndReturn(run func(entities.PasswordDetail) error) *PasswordRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordRepository creates a new instance of PasswordRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordRepository {
	mock := &PasswordRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
