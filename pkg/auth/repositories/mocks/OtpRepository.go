// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entities "github.com/Goldwin/ies-pik-cms/pkg/auth/entities"
	mock "github.com/stretchr/testify/mock"
)

// OtpRepository is an autogenerated mock type for the OtpRepository type
type OtpRepository struct {
	mock.Mock
}

type OtpRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *OtpRepository) EXPECT() *OtpRepository_Expecter {
	return &OtpRepository_Expecter{mock: &_m.Mock}
}

// AddOtp provides a mock function with given fields: _a0
func (_m *OtpRepository) AddOtp(_a0 entities.Otp) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddOtp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Otp) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpRepository_AddOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOtp'
type OtpRepository_AddOtp_Call struct {
	*mock.Call
}

// AddOtp is a helper method to define mock.On call
//   - _a0 entities.Otp
func (_e *OtpRepository_Expecter) AddOtp(_a0 interface{}) *OtpRepository_AddOtp_Call {
	return &OtpRepository_AddOtp_Call{Call: _e.mock.On("AddOtp", _a0)}
}

func (_c *OtpRepository_AddOtp_Call) Run(run func(_a0 entities.Otp)) *OtpRepository_AddOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Otp))
	})
	return _c
}

func (_c *OtpRepository_AddOtp_Call) Return(_a0 error) *OtpRepository_AddOtp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpRepository_AddOtp_Call) RunAndReturn(run func(entities.Otp) error) *OtpRepository_AddOtp_Call {
	_c.Call.Return(run)
	return _c
}

// GetOtp provides a mock function with given fields: _a0
func (_m *OtpRepository) GetOtp(_a0 entities.EmailAddress) (*entities.Otp, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOtp")
	}

	var r0 *entities.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) (*entities.Otp, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) *entities.Otp); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Otp)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.EmailAddress) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OtpRepository_GetOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOtp'
type OtpRepository_GetOtp_Call struct {
	*mock.Call
}

// GetOtp is a helper method to define mock.On call
//   - _a0 entities.EmailAddress
func (_e *OtpRepository_Expecter) GetOtp(_a0 interface{}) *OtpRepository_GetOtp_Call {
	return &OtpRepository_GetOtp_Call{Call: _e.mock.On("GetOtp", _a0)}
}

func (_c *OtpRepository_GetOtp_Call) Run(run func(_a0 entities.EmailAddress)) *OtpRepository_GetOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.EmailAddress))
	})
	return _c
}

func (_c *OtpRepository_GetOtp_Call) Return(_a0 *entities.Otp, _a1 error) *OtpRepository_GetOtp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OtpRepository_GetOtp_Call) RunAndReturn(run func(entities.EmailAddress) (*entities.Otp, error)) *OtpRepository_GetOtp_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveOtp provides a mock function with given fields: _a0
func (_m *OtpRepository) RemoveOtp(_a0 entities.Otp) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RemoveOtp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entities.Otp) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpRepository_RemoveOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveOtp'
type OtpRepository_RemoveOtp_Call struct {
	*mock.Call
}

// RemoveOtp is a helper method to define mock.On call
//   - _a0 entities.Otp
func (_e *OtpRepository_Expecter) RemoveOtp(_a0 interface{}) *OtpRepository_RemoveOtp_Call {
	return &OtpRepository_RemoveOtp_Call{Call: _e.mock.On("RemoveOtp", _a0)}
}

func (_c *OtpRepository_RemoveOtp_Call) Run(run func(_a0 entities.Otp)) *OtpRepository_RemoveOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Otp))
	})
	return _c
}

func (_c *OtpRepository_RemoveOtp_Call) Return(_a0 error) *OtpRepository_RemoveOtp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpRepository_RemoveOtp_Call) RunAndReturn(run func(entities.Otp) error) *OtpRepository_RemoveOtp_Call {
	_c.Call.Return(run)
	return _c
}

// NewOtpRepository creates a new instance of OtpRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOtpRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OtpRepository {
	mock := &OtpRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
