// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	entities "github.com/Goldwin/ies-pik-cms/pkg/auth/entities"
	mock "github.com/stretchr/testify/mock"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

type AccountRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountRepository) EXPECT() *AccountRepository_Expecter {
	return &AccountRepository_Expecter{mock: &_m.Mock}
}

// AddAccount provides a mock function with given fields: _a0
func (_m *AccountRepository) AddAccount(_a0 entities.Account) (*entities.Account, error) {
	ret := _m.Called(_a0)

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Account) (*entities.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.Account) *entities.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Account) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_AddAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAccount'
type AccountRepository_AddAccount_Call struct {
	*mock.Call
}

// AddAccount is a helper method to define mock.On call
//   - _a0 entities.Account
func (_e *AccountRepository_Expecter) AddAccount(_a0 interface{}) *AccountRepository_AddAccount_Call {
	return &AccountRepository_AddAccount_Call{Call: _e.mock.On("AddAccount", _a0)}
}

func (_c *AccountRepository_AddAccount_Call) Run(run func(_a0 entities.Account)) *AccountRepository_AddAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Account))
	})
	return _c
}

func (_c *AccountRepository_AddAccount_Call) Return(_a0 *entities.Account, _a1 error) *AccountRepository_AddAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_AddAccount_Call) RunAndReturn(run func(entities.Account) (*entities.Account, error)) *AccountRepository_AddAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: _a0
func (_m *AccountRepository) GetAccount(_a0 entities.EmailAddress) (*entities.Account, error) {
	ret := _m.Called(_a0)

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) (*entities.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.EmailAddress) *entities.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.EmailAddress) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type AccountRepository_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - _a0 entities.EmailAddress
func (_e *AccountRepository_Expecter) GetAccount(_a0 interface{}) *AccountRepository_GetAccount_Call {
	return &AccountRepository_GetAccount_Call{Call: _e.mock.On("GetAccount", _a0)}
}

func (_c *AccountRepository_GetAccount_Call) Run(run func(_a0 entities.EmailAddress)) *AccountRepository_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.EmailAddress))
	})
	return _c
}

func (_c *AccountRepository_GetAccount_Call) Return(_a0 *entities.Account, _a1 error) *AccountRepository_GetAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_GetAccount_Call) RunAndReturn(run func(entities.EmailAddress) (*entities.Account, error)) *AccountRepository_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccount provides a mock function with given fields: _a0
func (_m *AccountRepository) UpdateAccount(_a0 entities.Account) (*entities.Account, error) {
	ret := _m.Called(_a0)

	var r0 *entities.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(entities.Account) (*entities.Account, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entities.Account) *entities.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}

	if rf, ok := ret.Get(1).(func(entities.Account) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AccountRepository_UpdateAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccount'
type AccountRepository_UpdateAccount_Call struct {
	*mock.Call
}

// UpdateAccount is a helper method to define mock.On call
//   - _a0 entities.Account
func (_e *AccountRepository_Expecter) UpdateAccount(_a0 interface{}) *AccountRepository_UpdateAccount_Call {
	return &AccountRepository_UpdateAccount_Call{Call: _e.mock.On("UpdateAccount", _a0)}
}

func (_c *AccountRepository_UpdateAccount_Call) Run(run func(_a0 entities.Account)) *AccountRepository_UpdateAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entities.Account))
	})
	return _c
}

func (_c *AccountRepository_UpdateAccount_Call) Return(_a0 *entities.Account, _a1 error) *AccountRepository_UpdateAccount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AccountRepository_UpdateAccount_Call) RunAndReturn(run func(entities.Account) (*entities.Account, error)) *AccountRepository_UpdateAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountRepository creates a new instance of AccountRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccountRepository {
	mock := &AccountRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
